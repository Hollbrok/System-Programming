SEMOP(2)                                  Linux Programmer's Manual                                 SEMOP(2)

NNAAMMEE
       semop, semtimedop - System V semaphore operations

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//sseemm..hh>>

       iinntt sseemmoopp((iinntt _s_e_m_i_d,, ssttrruucctt sseemmbbuuff **_s_o_p_s,, ssiizzee__tt _n_s_o_p_s));;
       iinntt sseemmttiimmeeddoopp((iinntt _s_e_m_i_d,, ssttrruucctt sseemmbbuuff **_s_o_p_s,, ssiizzee__tt _n_s_o_p_s,,
                      ccoonnsstt ssttrruucctt ttiimmeessppeecc **_t_i_m_e_o_u_t));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       sseemmttiimmeeddoopp():
           _GNU_SOURCE

DDEESSCCRRIIPPTTIIOONN
       Each semaphore in a System V semaphore set has the following associated values:

           unsigned short  semval;   /* semaphore value */
           unsigned short  semzcnt;  /* # waiting for zero */
           unsigned short  semncnt;  /* # waiting for increase */
           pid_t           sempid;   /* PID of process that last

       sseemmoopp()  performs operations on selected semaphores in the set indicated by _s_e_m_i_d.  Each of the _n_s_o_p_s
       elements in the array pointed to by _s_o_p_s is a structure that specifies an operation to  be  performed
       on a single semaphore.  The elements of this structure are of type _s_t_r_u_c_t _s_e_m_b_u_f, containing the fol‐
       lowing members:

           unsigned short sem_num;  /* semaphore number */
           short          sem_op;   /* semaphore operation */
           short          sem_flg;  /* operation flags */

       Flags recognized in _s_e_m___f_l_g are IIPPCC__NNOOWWAAIITT and SSEEMM__UUNNDDOO.  If an operation specifies SSEEMM__UUNNDDOO, it will
       be automatically undone when the process terminates.

       The set of operations contained in _s_o_p_s is performed in _a_r_r_a_y _o_r_d_e_r, and _a_t_o_m_i_c_a_l_l_y, that is, the op‐
       erations are performed either as a complete unit, or not at all.  The behavior of the system call  if
       not all operations can be performed immediately depends on the presence of the IIPPCC__NNOOWWAAIITT flag in the
       individual _s_e_m___f_l_g fields, as noted below.

       Each operation is performed on the _s_e_m___n_u_m-th semaphore of the semaphore set, where the  first  sema‐
       phore  of  the  set is numbered 0.  There are three types of operation, distinguished by the value of
       _s_e_m___o_p.

       If _s_e_m___o_p is a positive integer, the operation adds this value to the semaphore value (_s_e_m_v_a_l).  Fur‐
       thermore, if SSEEMM__UUNNDDOO is specified for this operation, the system subtracts the value _s_e_m___o_p from the
       semaphore adjustment (_s_e_m_a_d_j) value for this semaphore.  This operation can always  proceed—it  never
       forces a thread to wait.  The calling process must have alter permission on the semaphore set.

       If  _s_e_m___o_p is zero, the process must have read permission on the semaphore set.  This is a "wait-for-
       zero" operation: if _s_e_m_v_a_l is zero, the operation can immediately proceed.  Otherwise, if  IIPPCC__NNOOWWAAIITT
       is  specified  in _s_e_m___f_l_g, sseemmoopp() fails with _e_r_r_n_o set to EEAAGGAAIINN (and none of the operations in _s_o_p_s
       is performed).  Otherwise, _s_e_m_z_c_n_t (the count of threads waiting until this semaphore's value becomes
       zero) is incremented by one and the thread sleeps until one of the following occurs:

       • _s_e_m_v_a_l becomes 0, at which time the value of _s_e_m_z_c_n_t is decremented.

       • The semaphore set is removed: sseemmoopp() fails, with _e_r_r_n_o set to EEIIDDRRMM.

       • The  calling  thread  catches a signal: the value of _s_e_m_z_c_n_t is decremented and sseemmoopp() fails, with
         _e_r_r_n_o set to EEIINNTTRR.

       If _s_e_m___o_p is less than zero, the process must have alter permission on the semaphore set.  If  _s_e_m_v_a_l
       is  greater than or equal to the absolute value of _s_e_m___o_p, the operation can proceed immediately: the
       absolute value of _s_e_m___o_p is subtracted from _s_e_m_v_a_l, and, if SSEEMM__UUNNDDOO is specified for this operation,
       the system adds the absolute value of _s_e_m___o_p to the semaphore adjustment (_s_e_m_a_d_j) value for this sem‐
       aphore.  If the absolute value of _s_e_m___o_p is greater than  _s_e_m_v_a_l,  and  IIPPCC__NNOOWWAAIITT  is  specified  in
       _s_e_m___f_l_g,  sseemmoopp()  fails, with _e_r_r_n_o set to EEAAGGAAIINN (and none of the operations in _s_o_p_s is performed).
       Otherwise, _s_e_m_n_c_n_t (the counter of threads waiting for this semaphore's value to increase) is  incre‐
       mented by one and the thread sleeps until one of the following occurs:

       • _s_e_m_v_a_l  becomes  greater than or equal to the absolute value of _s_e_m___o_p: the operation now proceeds,
         as described above.

       • The semaphore set is removed from the system: sseemmoopp() fails, with _e_r_r_n_o set to EEIIDDRRMM.

       • The calling thread catches a signal: the value of _s_e_m_n_c_n_t is decremented and  sseemmoopp()  fails,  with
         _e_r_r_n_o set to EEIINNTTRR.

       On  successful  completion,  the _s_e_m_p_i_d value for each semaphore specified in the array pointed to by
       _s_o_p_s is set to the caller's process ID.  In addition, the _s_e_m___o_t_i_m_e is set to the current time.

   sseemmttiimmeeddoopp(())
       sseemmttiimmeeddoopp() behaves identically to sseemmoopp() except that in those cases where the calling thread would
       sleep,  the duration of that sleep is limited by the amount of elapsed time specified by the _t_i_m_e_s_p_e_c
       structure whose address is passed in the _t_i_m_e_o_u_t argument.  (This sleep interval will be  rounded  up
       to the system clock granularity, and kernel scheduling delays mean that the interval may overrun by a
       small amount.)  If the specified time limit has been reached, sseemmttiimmeeddoopp() fails with  _e_r_r_n_o  set  to
       EEAAGGAAIINN (and none of the operations in _s_o_p_s is performed).  If the _t_i_m_e_o_u_t argument is NULL, then sseemm‐‐
       ttiimmeeddoopp() behaves exactly like sseemmoopp().

       Note that if sseemmttiimmeeddoopp() is interrupted by a signal, causing the call to fail with the error  EEIINNTTRR,
       the contents of _t_i_m_e_o_u_t are left unchanged.

RREETTUURRNN VVAALLUUEE
       On success, sseemmoopp() and sseemmttiimmeeddoopp() return 0.  On failure, they return -1, and set _e_r_r_n_o to indicate
       the error.

EERRRROORRSS
       EE22BBIIGG  The argument _n_s_o_p_s is greater than SSEEMMOOPPMM, the maximum number of operations allowed per system
              call.

       EEAACCCCEESS The  calling process does not have the permissions required to perform the specified semaphore
              operations, and does not have the CCAAPP__IIPPCC__OOWWNNEERR capability in the user namespace that  governs
              its IPC namespace.

       EEAAGGAAIINN An  operation  could not proceed immediately and either IIPPCC__NNOOWWAAIITT was specified in _s_e_m___f_l_g or
              the time limit specified in _t_i_m_e_o_u_t expired.

       EEFFAAUULLTT An address specified in either the _s_o_p_s or the _t_i_m_e_o_u_t argument isn't accessible.

       EEFFBBIIGG  For some operation the value of _s_e_m___n_u_m is less than 0 or greater than or equal to the  number
              of semaphores in the set.

       EEIIDDRRMM  The semaphore set was removed.

       EEIINNTTRR  While blocked in this system call, the thread caught a signal; see ssiiggnnaall(7).

       EEIINNVVAALL The semaphore set doesn't exist, or _s_e_m_i_d is less than zero, or _n_s_o_p_s has a nonpositive value.

       EENNOOMMEEMM The _s_e_m___f_l_g of some operation specified SSEEMM__UUNNDDOO and the system does not have enough memory to
              allocate the undo structure.

       EERRAANNGGEE For some operation _s_e_m___o_p_+_s_e_m_v_a_l is greater than SSEEMMVVMMXX, the implementation dependent  maximum
              value for _s_e_m_v_a_l.

VVEERRSSIIOONNSS
       sseemmttiimmeeddoopp()  first  appeared  in  Linux  2.5.52, and was subsequently backported into kernel 2.4.22.
       Glibc support for sseemmttiimmeeddoopp() first appeared in version 2.3.3.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4.

NNOOTTEESS
       The _s_e_m___u_n_d_o structures of a process aren't inherited by the child produced by ffoorrkk(2), but they  are
       inherited across an eexxeeccvvee(2) system call.

       sseemmoopp()  is  never automatically restarted after being interrupted by a signal handler, regardless of
       the setting of the SSAA__RREESSTTAARRTT flag when establishing a signal handler.

       A semaphore adjustment (_s_e_m_a_d_j) value is a per-process, per-semaphore integer that is the negated sum
       of  all operations performed on a semaphore specifying the SSEEMM__UUNNDDOO flag.  Each process has a list of
       _s_e_m_a_d_j values—one value for each semaphore on which it has operated using SSEEMM__UUNNDDOO.  When  a  process
       terminates, each of its per-semaphore _s_e_m_a_d_j values is added to the corresponding semaphore, thus un‐
       doing the effect of that process's operations on the semaphore (but see BUGS below).   When  a  sema‐
       phore's  value is directly set using the SSEETTVVAALL or SSEETTAALLLL request to sseemmccttll(2), the corresponding _s_e_‐
       _m_a_d_j values in all processes are cleared.  The cclloonnee(2)  CCLLOONNEE__SSYYSSVVSSEEMM  flag  allows  more  than  one
       process to share a _s_e_m_a_d_j list; see cclloonnee(2) for details.

       The _s_e_m_v_a_l, _s_e_m_p_i_d, _s_e_m_z_c_n_t, and _s_e_m_n_c_t values for a semaphore can all be retrieved using appropriate
       sseemmccttll(2) calls.

   SSeemmaapphhoorree lliimmiittss
       The following limits on semaphore set resources affect the sseemmoopp() call:

       SSEEMMOOPPMM Maximum number of operations allowed for one sseemmoopp() call.  Before  Linux  3.19,  the  default
              value  for  this  limit  was  32.  Since Linux 3.19, the default value is 500.  On Linux, this
              limit can be read and modified via the third field of _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_e_m.  _N_o_t_e: this  limit
              should  not be raised above 1000, because of the risk of that sseemmoopp() fails due to kernel mem‐
              ory fragmentation when allocating memory to copy the _s_o_p_s array.

       SSEEMMVVMMXX Maximum allowable value for _s_e_m_v_a_l: implementation dependent (32767).

       The implementation has no intrinsic limits for the adjust on exit maximum value (SSEEMMAAEEMM), the  system
       wide  maximum  number  of undo structures (SSEEMMMMNNUU) and the per-process maximum number of undo entries
       system parameters.

BBUUGGSS
       When a process terminates, its set of associated _s_e_m_a_d_j structures is used to undo the effect of  all
       of  the  semaphore  operations it performed with the SSEEMM__UUNNDDOO flag.  This raises a difficulty: if one
       (or more) of these semaphore adjustments would result in an attempt to decrease a  semaphore's  value
       below  zero, what should an implementation do?  One possible approach would be to block until all the
       semaphore adjustments could be performed.  This is however undesirable since it could  force  process
       termination  to  block  for arbitrarily long periods.  Another possibility is that such semaphore ad‐
       justments could be ignored altogether (somewhat analogously to failing when IIPPCC__NNOOWWAAIITT  is  specified
       for  a semaphore operation).  Linux adopts a third approach: decreasing the semaphore value as far as
       possible (i.e., to zero) and allowing process termination to proceed immediately.

       In kernels 2.6.x, x <= 10, there is a bug that in some circumstances prevents a thread that is  wait‐
       ing  for  a  semaphore  value  to become zero from being woken up when the value does actually become
       zero.  This bug is fixed in kernel 2.6.11.

EEXXAAMMPPLLEESS
       The following code segment uses sseemmoopp() to atomically wait for the value of  semaphore  0  to  become
       zero, and then increment the semaphore value by one.

           struct sembuf sops[2];
           int semid;

           /* Code to set _s_e_m_i_d omitted */

           sops[0].sem_num = 0;        /* Operate on semaphore 0 */
           sops[0].sem_op = 0;         /* Wait for value to equal 0 */
           sops[0].sem_flg = 0;

           sops[1].sem_num = 0;        /* Operate on semaphore 0 */
           sops[1].sem_op = 1;         /* Increment value by one */
           sops[1].sem_flg = 0;

           if (semop(semid, sops, 2) == -1) {
               perror("semop");
               exit(EXIT_FAILURE);
           }

       A further example of the use of sseemmoopp() can be found in sshhmmoopp(2).

SSEEEE AALLSSOO
       cclloonnee(2), sseemmccttll(2), sseemmggeett(2), ssiiggaaccttiioonn(2), ccaappaabbiilliittiieess(7), sseemm__oovveerrvviieeww(7), ssyyssvviippcc(7), ttiimmee(7)

CCOOLLOOPPHHOONN
       This  page is part of release 5.13 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, in‐
       formation  about  reporting  bugs,  and  the  latest  version  of  this  page,  can   be   found   at
       https://www.kernel.org/doc/man-pages/.

Linux                                            2021-03-22                                         SEMOP(2)
